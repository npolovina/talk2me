name: 4. Configure Route53 DNS

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true 
        default: 'us-east-1'
    cluster_name:
      description: 'EKS Cluster Name'
      required: true
      default: 'talk2me-cluster'
    domain_name:
      description: 'Domain Name'
      required: true
      default: 'talk2me-gen-z.com'
env:
  AWS_REGION: ${{ github.event.inputs.region }}
  CLUSTER_NAME: ${{ github.event.inputs.cluster_name }}
  DOMAIN_NAME: ${{ github.event.inputs.domain_name }}
permissions:
  id-token: write
  contents: read
jobs:
  configure-dns:
    name: Configure Route53 DNS
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
    
    - name: Check Hosted Zone
      id: check-zone
      run: |
        ZONE_ID=$(aws route53 list-hosted-zones-by-name \
            --query "HostedZones[?Name=='$DOMAIN_NAME.'].Id" \
            --output text | cut -d/ -f3)
        
        if [ -z "$ZONE_ID" ]; then
            echo "Creating new hosted zone for $DOMAIN_NAME"
            ZONE_RESULT=$(aws route53 create-hosted-zone \
            --name $DOMAIN_NAME \
            --caller-reference "talk2me-$(date +%s)")
            ZONE_ID=$(echo $ZONE_RESULT | jq -r '.HostedZone.Id' | cut -d/ -f3)
            echo "Nameservers for domain configuration:"
            echo $ZONE_RESULT | jq -r '.DelegationSet.NameServers[]'
        fi
        
        echo "ZONE_ID=$ZONE_ID" >> $GITHUB_ENV
    
    - name: Get Load Balancer Address
      id: get-lb
      run: |
        # Wait for ingress to get an address
        ATTEMPTS=0
        MAX_ATTEMPTS=30
        
        while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            LB_ADDRESS=$(kubectl get ingress talk2me-ingress -n talk2me -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
            
            if [ -n "$LB_ADDRESS" ]; then
            echo "Ingress load balancer found: $LB_ADDRESS"
            echo "LB_ADDRESS=$LB_ADDRESS" >> $GITHUB_ENV
            break
            fi
            
            ATTEMPTS=$((ATTEMPTS+1))
            sleep 20
        done
        
        if [ -z "$LB_ADDRESS" ]; then
            echo "Error: Load balancer address not available"
            exit 1
        fi
    
    - name: Create DNS Records
      run: |
        # Get the hosted zone ID for Application Load Balancer
        ALB_HOSTED_ZONE_ID="Z35SXDOTRQ7X7K"
        
        # Prepare DNS changes
        cat > dns-changes.json << EOF
        {
            "Changes": [
            {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                "Name": "$DOMAIN_NAME",
                "Type": "A",
                "AliasTarget": {
                    "HostedZoneId": "$ALB_HOSTED_ZONE_ID",
                    "DNSName": "$LB_ADDRESS",
                    "EvaluateTargetHealth": true
                }
                }
            },
            {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                "Name": "api.$DOMAIN_NAME",
                "Type": "A",
                "AliasTarget": {
                    "HostedZoneId": "$ALB_HOSTED_ZONE_ID",
                    "DNSName": "$LB_ADDRESS",
                    "EvaluateTargetHealth": true
                }
                }
            }
            ]
        }
        EOF
        
        # Apply DNS changes
        aws route53 change-resource-record-sets \
            --hosted-zone-id $ZONE_ID \
            --change-batch file://dns-changes.json
    
    - name: Output DNS Configuration
      run: |
        echo "DNS Configuration Complete"
        echo "Domain: $DOMAIN_NAME"
        echo "Load Balancer: $LB_ADDRESS"
        echo "Frontend URL: https://$DOMAIN_NAME"
        echo "Backend API URL: https://api.$DOMAIN_NAME"