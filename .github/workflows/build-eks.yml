# .github/workflows/build-eks.yml
name: 1. EKS Cluster Setup
# on:
#   push:
#     branches: [ main ]
#     paths-ignore:
#       - '**.md'
#       - 'k8s/**'
#       - '.github/workflows/deploy.yml'
#   pull_request:
#     branches: [ main ]
#     paths-ignore:
#       - '**.md'
#       - 'k8s/**'
#       - '.github/workflows/deploy.yml'
# name: EKS Cluster Setup

on:
  workflow_run:
    workflows: ["Build Talk2Me"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'EKS Cluster Name'
        required: true
        default: 'talk2me'
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      node_type:
        description: 'EC2 Instance Type for Nodes'
        required: true
        default: 't3.medium'
      node_min:
        description: 'Minimum Number of Nodes'
        required: true
        default: '2'
      node_max:
        description: 'Maximum Number of Nodes'
        required: true
        default: '4'
      node_desired:
        description: 'Desired Number of Nodes'
        required: true
        default: '2'

jobs:
  setup-iam-role:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    outputs:
      role_arn: ${{ steps.create_role.outputs.role_arn }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region || secrets.AWS_REGION || 'us-east-1' }}

      - name: Set up GitHub OIDC Provider and IAM Role
        id: create_role
        run: |
          # Set variables
          GITHUB_OIDC_PROVIDER_URL="https://token.actions.githubusercontent.com"
          ROLE_NAME="github-actions-eks-role"
          REPO_NAME="${GITHUB_REPOSITORY}"
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          
          echo "Repository: $REPO_NAME"
          echo "AWS Account ID: $ACCOUNT_ID"
          
          # Check if OIDC provider exists
          if ! aws iam list-open-id-connect-providers | grep -q $(aws iam list-open-id-connect-providers | grep -o "arn:aws:iam::${ACCOUNT_ID}:oidc-provider/${GITHUB_OIDC_PROVIDER_URL//\//\\/}"); then
            echo "Creating GitHub OIDC provider..."
            aws iam create-open-id-connect-provider \
              --url $GITHUB_OIDC_PROVIDER_URL \
              --client-id-list "sts.amazonaws.com" \
              --thumbprint-list "$(echo | openssl s_client -servername token.actions.githubusercontent.com -showcerts -connect token.actions.githubusercontent.com:443 2>/dev/null | openssl x509 -fingerprint -noout | cut -d '=' -f 2 | tr -d ':')"
          else
            echo "GitHub OIDC provider already exists."
          fi
          
          # Create trust policy
          cat > trust-policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Federated": "arn:aws:iam::${ACCOUNT_ID}:oidc-provider/${GITHUB_OIDC_PROVIDER_URL}"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                  "StringEquals": {
                    "${GITHUB_OIDC_PROVIDER_URL}:aud": "sts.amazonaws.com"
                  },
                  "StringLike": {
                    "${GITHUB_OIDC_PROVIDER_URL}:sub": "repo:${REPO_NAME}:*"
                  }
                }
              }
            ]
          }
          EOF
          
          # Check if role exists
          if ! aws iam get-role --role-name $ROLE_NAME >/dev/null 2>&1; then
            echo "Creating GitHub Actions EKS Role..."
            aws iam create-role --role-name $ROLE_NAME --assume-role-policy-document file://trust-policy.json
            
            # Attach necessary policies for EKS and ECR
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonECR-FullAccess
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonEKSServicePolicy
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/IAMFullAccess
            aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess
          else
            echo "GitHub Actions EKS Role already exists."
            
            # Update trust policy to ensure it's current
            aws iam update-assume-role-policy --role-name $ROLE_NAME --policy-document file://trust-policy.json
          fi
          
          # Get the role ARN
          ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query "Role.Arn" --output text)
          echo "Created/Updated role ARN: $ROLE_ARN"
          echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT
          
          # Create a custom policy for EKS management if needed
          cat > eks-policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "eks:*",
                  "ec2:*",
                  "elasticloadbalancing:*",
                  "autoscaling:*",
                  "cloudwatch:*",
                  "logs:*"
                ],
                "Resource": "*"
              }
            ]
          }
          EOF
          
          # Create and attach the policy
          POLICY_NAME="EKS-Management-Policy"
          if ! aws iam get-policy --policy-arn "arn:aws:iam::${ACCOUNT_ID}:policy/${POLICY_NAME}" >/dev/null 2>&1; then
            aws iam create-policy --policy-name $POLICY_NAME --policy-document file://eks-policy.json
          fi
          
          aws iam attach-role-policy --role-name $ROLE_NAME --policy-arn "arn:aws:iam::${ACCOUNT_ID}:policy/${POLICY_NAME}"
          
          echo "Role and policies successfully configured."

  setup-eks:
    needs: setup-iam-role
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.setup-iam-role.outputs.role_arn }}
          aws-region: ${{ github.event.inputs.region || secrets.AWS_REGION || 'us-east-1' }}
          audience: sts.amazonaws.com

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Create EKS cluster
        run: |
          # Set cluster name from input or default
          CLUSTER_NAME="${{ github.event.inputs.cluster_name || 'talk2me' }}"
          REGION="${{ github.event.inputs.region || secrets.AWS_REGION || 'us-east-1' }}"
          NODE_TYPE="${{ github.event.inputs.node_type || 't3.medium' }}"
          NODE_MIN="${{ github.event.inputs.node_min || '2' }}"
          NODE_MAX="${{ github.event.inputs.node_max || '4' }}"
          NODE_DESIRED="${{ github.event.inputs.node_desired || '2' }}"
          
          echo "Creating EKS cluster: $CLUSTER_NAME in region $REGION"
          echo "This will take approximately 15-20 minutes..."
          
          eksctl create cluster \
            --name "$CLUSTER_NAME" \
            --region "$REGION" \
            --node-type "$NODE_TYPE" \
            --nodes-min "$NODE_MIN" \
            --nodes-max "$NODE_MAX" \
            --nodes "$NODE_DESIRED" \
            --with-oidc \
            --managed \
            --alb-ingress-access

      - name: Install AWS Load Balancer Controller
        run: |
          CLUSTER_NAME="${{ github.event.inputs.cluster_name || 'talk2me' }}"
          echo "Installing AWS Load Balancer Controller..."
          
          # Create IAM policy for the AWS Load Balancer Controller
          POLICY_NAME="AWSLoadBalancerControllerIAMPolicy"
          POLICY_ARN=$(aws iam list-policies --query "Policies[?PolicyName=='$POLICY_NAME'].Arn" --output text)
          
          if [ -z "$POLICY_ARN" ]; then
            echo "Creating IAM policy for AWS Load Balancer Controller..."
            curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
            
            POLICY_ARN=$(aws iam create-policy \
              --policy-name $POLICY_NAME \
              --policy-document file://iam-policy.json \
              --query 'Policy.Arn' --output text)
              
            rm iam-policy.json
          else
            echo "IAM policy $POLICY_NAME already exists."
          fi
          
          # Create service account for the AWS Load Balancer Controller
          eksctl create iamserviceaccount \
            --cluster=$CLUSTER_NAME \
            --namespace=kube-system \
            --name=aws-load-balancer-controller \
            --attach-policy-arn=$POLICY_ARN \
            --override-existing-serviceaccounts \
            --approve
          
          # Add Helm repo
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update
          
          # Install the AWS Load Balancer Controller
          helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=$CLUSTER_NAME \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller

      - name: Create ECR repositories
        run: |
          echo "Creating ECR repositories for Talk2Me..."
          
          aws ecr create-repository --repository-name talk2me-frontend --image-scanning-configuration scanOnPush=true || echo "Frontend repository already exists"
          aws ecr create-repository --repository-name talk2me-backend --image-scanning-configuration scanOnPush=true || echo "Backend repository already exists"
      
      - name: Create Kubernetes namespace
        run: |
          echo "Creating Talk2Me namespace in Kubernetes..."
          kubectl create namespace talk2me --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Display role ARN for manual setup
        run: |
          CLUSTER_NAME="${{ github.event.inputs.cluster_name || 'talk2me' }}"
          REGION="${{ github.event.inputs.region || secrets.AWS_REGION || 'us-east-1' }}"
          
          echo "=================================================="
          echo "EKS setup complete! The Talk2Me application can now be deployed using the GitHub Actions workflows."
          echo ""
          echo "IMPORTANT: Add this IAM role ARN as a secret in your repository:"
          echo "AWS_ROLE_ARN: ${{ needs.setup-iam-role.outputs.role_arn }}"
          echo ""
          echo "Other required secrets:"
          echo "- AWS_REGION: $REGION"
          echo "- ECR_FRONTEND_REPO: talk2me-frontend"
          echo "- ECR_BACKEND_REPO: talk2me-backend"
          echo "- EKS_CLUSTER_NAME: $CLUSTER_NAME"
          echo "- DEEPSEEK_API_KEY: Your DeepSeek API key"
          echo "=================================================="