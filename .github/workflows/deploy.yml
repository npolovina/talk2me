# .github/workflows/deploy.yml
name: Deploy to EKS

on:
  workflow_run:
    workflows: ["Build and Push Images"]
    types:
      - completed
    branches: [main]
  # Allow manual deployments
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Image tag to deploy (defaults to latest build)'
        required: false
        default: ''

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download artifacts from the triggering workflow (only for workflow_run trigger)
      - name: Download artifacts from workflow
        if: ${{ github.event_name == 'workflow_run' && github.event.inputs.image_tag == '' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build.yml
          name: image-tag
          path: .
          workflow_conclusion: success
          
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Install kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # Install eksctl
      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version

      # Get AWS account ID
      - name: Get AWS account ID
        id: aws-account
        run: |
          echo "account_id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      # Set image tag based on input or artifact
      - name: Set image tag
        id: vars
        run: |
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            echo "image_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          elif [ -f "image_tag.txt" ]; then
            IMAGE_TAG=$(cat image_tag.txt)
            echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          else
            # Fallback to 'latest' if no tag is available
            echo "image_tag=latest" >> $GITHUB_OUTPUT
            echo "Warning: No image tag found, using 'latest' instead" >> $GITHUB_STEP_SUMMARY
          fi

      # Update kubeconfig to connect to EKS cluster with proper authentication
      - name: Update kubeconfig for EKS cluster
        run: |
          if [ -z "${{ secrets.EKS_CLUSTER_NAME }}" ]; then
            echo "Error: EKS_CLUSTER_NAME secret is not set"
            exit 1
          fi
  
          # Get identity info for debugging
          echo "Current AWS identity:"
          aws sts get-caller-identity
        
          # Update kubeconfig with explicit role ARN
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} \
            --name ${{ secrets.EKS_CLUSTER_NAME }} \
            --role-arn ${{ secrets.AWS_ROLE_ARN }}
        
          # Verify kubeconfig was created properly
          kubectl config view --minify
        
          # Test connection with a basic command
          kubectl version --short

      # Create namespace if it doesn't exist
      - name: Create namespace if needed
        run: |
          # Try with validation disabled first to avoid initial auth errors
          kubectl create namespace talk2me --dry-run=client -o yaml | kubectl apply --validate=false -f -

          # Then verify the namespace exists
          kubectl get namespace talk2me

      # Update Kubernetes secrets
      - name: Update Kubernetes secrets
        run: |
          DEEPSEEK_API_KEY_BASE64=$(echo -n "${{ secrets.DEEPSEEK_API_KEY }}" | base64 -w 0)
          
          # Create secret configuration
          cat << EOF > ./secret.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: talk2me-secrets
            namespace: talk2me
          type: Opaque
          data:
            deepseek-api-key: ${DEEPSEEK_API_KEY_BASE64}
          EOF
          
          # Apply the secret
          kubectl apply -f ./secret.yaml
          rm ./secret.yaml

      # Process and apply Kubernetes manifests
      - name: Deploy to EKS
        run: |
          # Set variables for templating
          export AWS_ACCOUNT_ID="${{ steps.aws-account.outputs.account_id }}"
          export AWS_REGION="${{ secrets.AWS_REGION }}"
          export IMAGE_TAG="${{ steps.vars.outputs.image_tag }}"
          export DEEPSEEK_API_KEY_BASE64="$(echo -n "${{ secrets.DEEPSEEK_API_KEY }}" | base64 -w 0)"
          
          # Process the manifests
          for manifest in k8s/*.yaml; do
            echo "Processing $manifest..."
            envsubst < "$manifest" | kubectl apply -f -
          done

      # Verify deployment 
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/talk2me-backend -n talk2me
          kubectl rollout status deployment/talk2me-frontend -n talk2me