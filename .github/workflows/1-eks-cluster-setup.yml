name: 1. EKS Cluster Setup

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      cluster_name:
        description: 'EKS Cluster Name'
        required: true
        default: 'talk2me-cluster'
      node_group_size:
        description: 'Node Group Size (min,desired,max)'
        required: true
        default: '2,3,4'
      node_instance_type:
        description: 'EC2 Instance Type for Nodes'
        required: true
        default: 't3.medium'
      kubernetes_version:
        description: 'Kubernetes Version'
        required: true
        default: '1.28'
      enable_autoscaler:
        description: 'Enable Cluster Autoscaler'
        required: false
        default: 'false'
        type: boolean

env:
  AWS_REGION: ${{ github.event.inputs.region }}
  CLUSTER_NAME: ${{ github.event.inputs.cluster_name }}

permissions:
  id-token: write
  contents: read

jobs:
  eks-setup:
    name: Create EKS Cluster and Configure Add-ons
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Get AWS Account ID
        id: get-aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
      
      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version
      
      - name: Create EKS cluster
        run: |
          # Parse node group size parameters
          IFS=',' read -ra SIZES <<< "${{ github.event.inputs.node_group_size }}"
          MIN_SIZE=${SIZES[0]}
          DESIRED_SIZE=${SIZES[1]}
          MAX_SIZE=${SIZES[2]}
          
          echo "Creating EKS cluster $CLUSTER_NAME in $AWS_REGION..."
          eksctl create cluster \
            --name $CLUSTER_NAME \
            --region $AWS_REGION \
            --version ${{ github.event.inputs.kubernetes_version }} \
            --nodegroup-name standard-nodes \
            --node-type ${{ github.event.inputs.node_instance_type }} \
            --nodes-min $MIN_SIZE \
            --nodes $DESIRED_SIZE \
            --nodes-max $MAX_SIZE \
            --with-oidc \
            --managed \
            --asg-access
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
      
      - name: Install AWS Load Balancer Controller
        run: |
          # Create IAM policy for Load Balancer Controller
          curl -o iam_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json
          
          aws iam create-policy \
            --policy-name AWSLoadBalancerControllerIAMPolicy \
            --policy-document file://iam_policy.json || true
          
          # Create service account
          eksctl create iamserviceaccount \
            --cluster=$CLUSTER_NAME \
            --namespace=kube-system \
            --name=aws-load-balancer-controller \
            --attach-policy-arn=arn:aws:iam::$AWS_ACCOUNT_ID:policy/AWSLoadBalancerControllerIAMPolicy \
            --override-existing-serviceaccounts \
            --approve
          
          # Install Helm
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
          
          # Add Helm repository
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update
          
          # Install AWS Load Balancer Controller
          helm install aws-load-balancer-controller eks/aws-load-balancer-controller \
            --set clusterName=$CLUSTER_NAME \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            -n kube-system
      
      - name: Configure Cluster Autoscaler (when requested)
        if: ${{ github.event.inputs.enable_autoscaler == 'true' }}
        run: |
          # Create IAM policy for Cluster Autoscaler
          cat > cluster-autoscaler-policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "autoscaling:DescribeAutoScalingGroups",
                  "autoscaling:DescribeAutoScalingInstances",
                  "autoscaling:DescribeLaunchConfigurations",
                  "autoscaling:DescribeTags",
                  "autoscaling:SetDesiredCapacity",
                  "autoscaling:TerminateInstanceInAutoScalingGroup",
                  "ec2:DescribeLaunchTemplateVersions"
                ],
                "Resource": ["*"]
              }
            ]
          }
          EOF
          
          aws iam create-policy \
            --policy-name ClusterAutoscalerPolicy \
            --policy-document file://cluster-autoscaler-policy.json || true
          
          # Create service account
          eksctl create iamserviceaccount \
            --cluster=$CLUSTER_NAME \
            --namespace=kube-system \
            --name=cluster-autoscaler \
            --attach-policy-arn=arn:aws:iam::$AWS_ACCOUNT_ID:policy/ClusterAutoscalerPolicy \
            --override-existing-serviceaccounts \
            --approve
          
          # Install Cluster Autoscaler
          helm repo add autoscaler https://kubernetes.github.io/autoscaler
          helm repo update
          
          helm install cluster-autoscaler autoscaler/cluster-autoscaler \
            --set autoDiscovery.clusterName=$CLUSTER_NAME \
            --set awsRegion=$AWS_REGION \
            --set rbac.serviceAccount.create=false \
            --set rbac.serviceAccount.name=cluster-autoscaler \
            --namespace kube-system

      - name: Create Namespace for Talk2Me
        run: |
          kubectl create namespace talk2me --dry-run=client -o yaml | kubectl apply -f -
          
      - name: Create Secret for Application
        run: |
          kubectl create secret generic talk2me-secrets \
            --namespace talk2me \
            --from-literal=deepseek-api-key=${{ secrets.DEEPSEEK_API_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Output Cluster Configuration
        run: |
          echo "EKS Cluster Setup Complete"
          echo "Cluster Name: $CLUSTER_NAME"
          echo "Region: $AWS_REGION"