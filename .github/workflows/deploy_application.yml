name: 3. Deploy Application to EKS

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      cluster_name:
        description: 'EKS Cluster Name'
        required: true
        default: 'talk2me-cluster'
      image_tag:
        description: 'Docker Image Tag'
        required: true
        default: 'latest'

env:
  AWS_REGION: ${{ github.event.inputs.region }}
  CLUSTER_NAME: ${{ github.event.inputs.cluster_name }}
  IMAGE_TAG: ${{ github.event.inputs.image_tag }}
  DOMAIN_NAME: 'talk2me-gen-z.com'
  API_DOMAIN_NAME: 'api.talk2me-gen-z.com'

permissions:
  id-token: write
  contents: read

jobs:
  deploy-application:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
      
      - name: Get AWS Account ID
        id: get-aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
      
      - name: Find existing ALBs and Route53 records
        id: find-infrastructure
        run: |
          echo "Looking for existing AWS resources..."
          
          # Find all ALBs that might be related to our cluster
          echo "Finding ALBs related to $CLUSTER_NAME..."
          ALB_LIST=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?contains(LoadBalancerName, 'k8s') || contains(LoadBalancerName, 'eks') || contains(LoadBalancerName, 'talk2me')].{Name:LoadBalancerName,ARN:LoadBalancerArn,DNSName:DNSName}" --output json)
          
          echo "Found ALBs:"
          echo "$ALB_LIST" | jq -r '.[] | "- " + .Name + " (DNS: " + .DNSName + ")"'
          
          # Find the hosted zone for our domain
          echo "Finding Route53 hosted zone for $DOMAIN_NAME..."
          HOSTED_ZONE_ID=$(aws route53 list-hosted-zones-by-name --dns-name $DOMAIN_NAME --max-items 1 --query 'HostedZones[0].Id' --output text | cut -d'/' -f 3)
          
          if [ -z "$HOSTED_ZONE_ID" ] || [ "$HOSTED_ZONE_ID" == "null" ]; then
            echo "No hosted zone found for $DOMAIN_NAME"
            HOSTED_ZONE_EXISTS="false"
          else
            echo "Found hosted zone: $HOSTED_ZONE_ID"
            HOSTED_ZONE_EXISTS="true"
            
            # Check if we have DNS records pointing to an ALB
            DOMAIN_RECORDS=$(aws route53 list-resource-record-sets --hosted-zone-id $HOSTED_ZONE_ID --query "ResourceRecordSets[?Name=='$DOMAIN_NAME.' || Name=='$API_DOMAIN_NAME.']" --output json)
            
            if [ "$(echo "$DOMAIN_RECORDS" | jq 'length')" -gt 0 ]; then
              echo "Found DNS records:"
              echo "$DOMAIN_RECORDS" | jq -r '.[] | "- " + .Name + " -> " + (.ResourceRecords[0].Value // .AliasTarget.DNSName // "unknown")'
              
              # Try to find an ALB that DNS is pointing to
              DNS_ALB=$(echo "$DOMAIN_RECORDS" | jq -r '.[] | select(.Type=="A" and .AliasTarget) | .AliasTarget.DNSName' | grep 'elb.amazonaws.com' | head -1)
              
              if [ -n "$DNS_ALB" ]; then
                echo "Found DNS record pointing to ALB: $DNS_ALB"
                
                # Find the matching ALB from our list
                ALB_NAME=$(echo "$ALB_LIST" | jq -r --arg dns "$DNS_ALB" '.[] | select(.DNSName==$dns) | .Name')
                
                if [ -n "$ALB_NAME" ]; then
                  echo "Found matching ALB: $ALB_NAME"
                  MATCHING_ALB_NAME="$ALB_NAME"
                  echo "EXISTING_ALB_NAME=$ALB_NAME" >> $GITHUB_ENV
                  echo "alb_found=true" >> $GITHUB_OUTPUT
                else
                  echo "No matching ALB found in our list for DNS $DNS_ALB"
                  echo "alb_found=false" >> $GITHUB_OUTPUT
                fi
              else
                echo "No ALB DNS found in our Route53 records"
                echo "alb_found=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "No DNS records found for $DOMAIN_NAME or $API_DOMAIN_NAME"
              echo "alb_found=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # If we didn't find an ALB via DNS, try to use the existing ones or generate a new name
          if [ "$(echo "$GITHUB_OUTPUT" | grep -c "alb_found=true")" -eq 0 ]; then
            # Check if we have ALBs
            if [ "$(echo "$ALB_LIST" | jq 'length')" -gt 0 ]; then
              # Use the first one in the list
              FIRST_ALB=$(echo "$ALB_LIST" | jq -r '.[0].Name')
              echo "Using first ALB from list: $FIRST_ALB"
              echo "EXISTING_ALB_NAME=$FIRST_ALB" >> $GITHUB_ENV
              echo "alb_found=true" >> $GITHUB_OUTPUT
            else
              # Generate a new name
              NEW_ALB_NAME="talk2me-alb-$(date +%Y%m%d)"
              echo "No existing ALBs found, will use new name: $NEW_ALB_NAME"
              echo "EXISTING_ALB_NAME=$NEW_ALB_NAME" >> $GITHUB_ENV
              echo "alb_found=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Set hosted zone information
          echo "HOSTED_ZONE_ID=$HOSTED_ZONE_ID" >> $GITHUB_ENV
          echo "HOSTED_ZONE_EXISTS=$HOSTED_ZONE_EXISTS" >> $GITHUB_ENV
      
      - name: Deploy Backend
        run: |
          echo "Deploying backend service..."
          
          # Process template with environment variables
          if [ -f "k8s/backend-deployment.yaml" ]; then
            envsubst < k8s/backend-deployment.yaml > backend-deployment.yaml
            kubectl apply -f backend-deployment.yaml -n talk2me
          else
            echo "Warning: k8s/backend-deployment.yaml not found"
          fi
          
          if [ -f "k8s/backend-service.yaml" ]; then
            kubectl apply -f k8s/backend-service.yaml -n talk2me
          else
            echo "Warning: k8s/backend-service.yaml not found"
            # Create a default service if file doesn't exist
            cat << EOF | kubectl apply -f -
            apiVersion: v1
            kind: Service
            metadata:
              name: talk2me-backend
              namespace: talk2me
            spec:
              selector:
                app: talk2me-backend
              ports:
              - port: 80
                targetPort: 8000
              type: ClusterIP
            EOF
          fi
      
      - name: Deploy Frontend
        run: |
          echo "Deploying frontend service..."
          
          # Process template with environment variables
          if [ -f "k8s/frontend-deployment.yaml" ]; then
            envsubst < k8s/frontend-deployment.yaml > frontend-deployment.yaml
            kubectl apply -f frontend-deployment.yaml -n talk2me
          else
            echo "Warning: k8s/frontend-deployment.yaml not found"
          fi
          
          if [ -f "k8s/frontend-service.yaml" ]; then
            kubectl apply -f k8s/frontend-service.yaml -n talk2me
          else
            echo "Warning: k8s/frontend-service.yaml not found"
            # Create a default service if file doesn't exist
            cat << EOF | kubectl apply -f -
            apiVersion: v1
            kind: Service
            metadata:
              name: talk2me-frontend
              namespace: talk2me
            spec:
              selector:
                app: talk2me-frontend
              ports:
              - port: 80
                targetPort: 80
              type: ClusterIP
            EOF
          fi
      
      - name: Get ACM certificate ARN
        id: get-certificate
        run: |
          echo "Finding ACM certificate for $DOMAIN_NAME..."
          
          # Try to find certificate for domain in ACM
          CERT_ARN=$(aws acm list-certificates --query "CertificateSummaryList[?contains(DomainName, '*.${DOMAIN_NAME}') || DomainName=='${DOMAIN_NAME}'].CertificateArn" --output text | head -1)
          
          if [ -n "$CERT_ARN" ]; then
            echo "Found certificate: $CERT_ARN"
            echo "CERTIFICATE_ARN=$CERT_ARN" >> $GITHUB_ENV
            echo "certificate_found=true" >> $GITHUB_OUTPUT
          else
            echo "No certificate found for $DOMAIN_NAME"
            echo "certificate_found=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update and deploy Ingress
        run: |
          echo "Updating and deploying ingress..."
          
          # Create a temporary directory
          mkdir -p temp-k8s
          
          # Create or update ingress configuration
          if [ -f "k8s/ingress.yaml" ]; then
            cat k8s/ingress.yaml > temp-k8s/ingress.yaml
            
            # Update load balancer name annotation
            if grep -q "alb.ingress.kubernetes.io/load-balancer-name" temp-k8s/ingress.yaml; then
              # Update existing annotation
              sed -i "s|alb.ingress.kubernetes.io/load-balancer-name: .*|alb.ingress.kubernetes.io/load-balancer-name: $EXISTING_ALB_NAME|g" temp-k8s/ingress.yaml
            else
              # Add the annotation if it doesn't exist (right after the scheme annotation)
              sed -i '/alb.ingress.kubernetes.io\/scheme/a \    alb.ingress.kubernetes.io/load-balancer-name: '"$EXISTING_ALB_NAME"'' temp-k8s/ingress.yaml
            fi
            
            # Update certificate ARN if we found one
            if [ "${{ steps.get-certificate.outputs.certificate_found }}" == "true" ]; then
              if grep -q "alb.ingress.kubernetes.io/certificate-arn" temp-k8s/ingress.yaml; then
                # Update existing annotation
                sed -i "s|alb.ingress.kubernetes.io/certificate-arn: .*|alb.ingress.kubernetes.io/certificate-arn: $CERTIFICATE_ARN|g" temp-k8s/ingress.yaml
              else
                # Add the annotation if it doesn't exist (after SSL policy)
                sed -i '/alb.ingress.kubernetes.io\/ssl-policy/a \    alb.ingress.kubernetes.io/certificate-arn: '"$CERTIFICATE_ARN"'' temp-k8s/ingress.yaml
              fi
            fi
            
            # Update domain names in annotations
            sed -i "s|external-dns.alpha.kubernetes.io/hostname: .*|external-dns.alpha.kubernetes.io/hostname: $DOMAIN_NAME,$API_DOMAIN_NAME|g" temp-k8s/ingress.yaml
            
            # Update hosts in rules
            sed -i "s|host: .*talk2me.*\.com|host: $DOMAIN_NAME|g" temp-k8s/ingress.yaml
            sed -i "s|host: .*api\..*\.com|host: $API_DOMAIN_NAME|g" temp-k8s/ingress.yaml
          else
            # Create a new ingress file if one doesn't exist
            cat << EOF > temp-k8s/ingress.yaml
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              name: talk2me-ingress
              namespace: talk2me
              annotations:
                kubernetes.io/ingress.class: alb
                alb.ingress.kubernetes.io/scheme: internet-facing
                alb.ingress.kubernetes.io/target-type: ip
                alb.ingress.kubernetes.io/load-balancer-name: ${EXISTING_ALB_NAME}
                alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
                alb.ingress.kubernetes.io/ssl-redirect: '443'
                alb.ingress.kubernetes.io/ssl-policy: "ELBSecurityPolicy-TLS-1-2-2017-01"
                external-dns.alpha.kubernetes.io/hostname: "${DOMAIN_NAME},${API_DOMAIN_NAME}"
                alb.ingress.kubernetes.io/group.name: talk2me
            EOF
            
            # Add certificate ARN if we found one
            if [ "${{ steps.get-certificate.outputs.certificate_found }}" == "true" ]; then
              echo "    alb.ingress.kubernetes.io/certificate-arn: ${CERTIFICATE_ARN}" >> temp-k8s/ingress.yaml
            fi
            
            # Add rules
            cat << EOF >> temp-k8s/ingress.yaml
            spec:
              rules:
              - host: ${DOMAIN_NAME}
                http:
                  paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: talk2me-frontend
                        port:
                          number: 80
              - host: ${API_DOMAIN_NAME}
                http:
                  paths:
                  - path: /
                    pathType: Prefix
                    backend:
                      service:
                        name: talk2me-backend
                        port:
                          number: 80
            EOF
          fi
          
          # Display the modified ingress file
          echo "Final ingress configuration:"
          cat temp-k8s/ingress.yaml
          
          # Apply the ingress
          kubectl apply -f temp-k8s/ingress.yaml -n talk2me
      
      - name: Wait for deployments to be ready
        run: |
          echo "Waiting for backend deployment to be ready..."
          kubectl rollout status deployment/talk2me-backend -n talk2me --timeout=300s
          
          echo "Waiting for frontend deployment to be ready..."
          kubectl rollout status deployment/talk2me-frontend -n talk2me --timeout=300s
      
      - name: Check AWS Load Balancer Controller status
        run: |
          echo "Checking AWS Load Balancer Controller status..."
          kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller
          
          echo "Recent AWS Load Balancer Controller logs:"
          kubectl logs -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller --tail=20 || echo "Failed to get logs"
      
      - name: Wait for ingress and monitor DNS
        run: |
          echo "Waiting for ingress to get an address (this may take a few minutes)..."
          
          # Check initial ingress status
          kubectl describe ingress talk2me-ingress -n talk2me
          
          # Wait for the ingress to get an address
          ATTEMPTS=0
          MAX_ATTEMPTS=45  # Increased to allow more time
          SLEEP_SECONDS=20
          
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            LB_ADDRESS=$(kubectl get ingress talk2me-ingress -n talk2me -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
            
            if [ -n "$LB_ADDRESS" ]; then
              echo "Ingress load balancer is available at: $LB_ADDRESS"
              echo "LB_ADDRESS=$LB_ADDRESS" >> $GITHUB_ENV
              break
            fi
            
            echo "Waiting for load balancer address... Attempt $(($ATTEMPTS+1))/$MAX_ATTEMPTS"
            
            # Check for potential issues every few attempts
            if [ $(($ATTEMPTS % 5)) -eq 0 ]; then
              echo "-----------------------------------"
              echo "Checking ingress status:"
              kubectl describe ingress talk2me-ingress -n talk2me
              
              echo "-----------------------------------"
              echo "Checking AWS Load Balancer Controller logs:"
              kubectl logs -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller --tail=20 || echo "Failed to get logs"
              
              echo "-----------------------------------"
              echo "Checking ALB status in AWS:"
              aws elbv2 describe-load-balancers --names $EXISTING_ALB_NAME --query 'LoadBalancers[].{Name:LoadBalancerName,DNSName:DNSName,State:State.Code}' --output table 2>/dev/null || echo "ALB not found or still being created"
            fi
            
            ATTEMPTS=$((ATTEMPTS+1))
            sleep $SLEEP_SECONDS
          done
          
          if [ -z "$LB_ADDRESS" ]; then
            echo "Warning: Load balancer address not available after several attempts"
            kubectl get ingress talk2me-ingress -n talk2me -o yaml
            
            # Try to find the ALB directly in AWS
            echo "Checking AWS for the ALB:"
            AWS_ALB_DNS=$(aws elbv2 describe-load-balancers --names $EXISTING_ALB_NAME --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "")
            
            if [ -n "$AWS_ALB_DNS" ] && [ "$AWS_ALB_DNS" != "None" ]; then
              echo "Found ALB in AWS: $AWS_ALB_DNS"
              echo "LB_ADDRESS=$AWS_ALB_DNS" >> $GITHUB_ENV
            else
              echo "Could not find ALB in AWS. Check AWS Load Balancer Controller logs."
              echo "AWS Load Balancer Controller logs:"
              kubectl logs -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller --tail=50 || echo "Failed to get logs"
            fi
          fi
      
      - name: Update Route53 DNS if needed
        if: env.HOSTED_ZONE_EXISTS == 'true' && env.LB_ADDRESS != ''
        run: |
          echo "Updating Route53 DNS records to point to: $LB_ADDRESS"
          
          # Get the ALB hosted zone ID
          ALB_HOSTED_ZONE_ID=$(aws elbv2 describe-load-balancers --names $EXISTING_ALB_NAME --query 'LoadBalancers[0].CanonicalHostedZoneId' --output text 2>/dev/null || echo "Z35SXDOTRQ7X7K")
          
          # If we couldn't get the hosted zone ID, use the default for us-east-1
          if [ -z "$ALB_HOSTED_ZONE_ID" ] || [ "$ALB_HOSTED_ZONE_ID" == "None" ]; then
            ALB_HOSTED_ZONE_ID="Z35SXDOTRQ7X7K"  # Default for us-east-1
          fi
          
          # Create JSON for DNS change batch
          cat > dns-changes.json << EOF
          {
            "Changes": [
              {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "$DOMAIN_NAME",
                  "Type": "A",
                  "AliasTarget": {
                    "HostedZoneId": "$ALB_HOSTED_ZONE_ID",
                    "DNSName": "$LB_ADDRESS",
                    "EvaluateTargetHealth": true
                  }
                }
              },
              {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "$API_DOMAIN_NAME",
                  "Type": "A",
                  "AliasTarget": {
                    "HostedZoneId": "$ALB_HOSTED_ZONE_ID",
                    "DNSName": "$LB_ADDRESS",
                    "EvaluateTargetHealth": true
                  }
                }
              }
            ]
          }
          EOF
          
          # Apply the DNS changes
          aws route53 change-resource-record-sets \
            --hosted-zone-id $HOSTED_ZONE_ID \
            --change-batch file://dns-changes.json
          
          echo "DNS records have been updated for $DOMAIN_NAME and $API_DOMAIN_NAME"
          echo "DNS changes take time to propagate. Please allow 5-10 minutes."
      
      - name: Summary
        run: |
          echo "=========== Deployment Summary ==========="
          echo "Application deployed to EKS cluster: $CLUSTER_NAME"
          echo "Region: $AWS_REGION"
          echo "Image tag: $IMAGE_TAG"
          
          # Check all resources
          echo ""
          echo "Kubernetes resources:"
          echo "- Deployments:"
          kubectl get deployments -n talk2me
          
          echo "- Services:"
          kubectl get services -n talk2me
          
          echo "- Ingress:"
          kubectl get ingress -n talk2me
          
          echo "- Pods:"
          kubectl get pods -n talk2me
          
          # Show access information
          echo ""
          echo "Access Information:"
          if [ -n "$LB_ADDRESS" ]; then
            echo "Load Balancer Address: $LB_ADDRESS"
            echo "Frontend URL: https://$DOMAIN_NAME"
            echo "Backend API URL: https://$API_DOMAIN_NAME"
          else
            echo "Load Balancer Address: Not available"
            AWS_ALB_DNS=$(aws elbv2 describe-load-balancers --names $EXISTING_ALB_NAME --query 'LoadBalancers[0].DNSName' --output text 2>/dev/null || echo "Not found")
            if [ "$AWS_ALB_DNS" != "Not found" ] && [ "$AWS_ALB_DNS" != "None" ]; then
              echo "AWS ALB DNS: $AWS_ALB_DNS"
              echo "You may need to manually update your DNS records."
            fi
          fi
          
          # Note about DNS propagation
          if [ "$HOSTED_ZONE_EXISTS" == "true" ] && [ -n "$LB_ADDRESS" ]; then
            echo ""
            echo "DNS records have been updated, but changes may take time to propagate."
            echo "If the application is not accessible immediately, please wait 5-10 minutes."
          fi
          
          echo "=========================================="