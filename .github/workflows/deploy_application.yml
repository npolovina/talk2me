name: 3. Deploy Application to EKS

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      cluster_name:
        description: 'EKS Cluster Name'
        required: true
        default: 'talk2me-cluster'
      image_tag:
        description: 'Docker Image Tag'
        required: true
        default: 'latest'

env:
  AWS_REGION: ${{ github.event.inputs.region }}
  CLUSTER_NAME: ${{ github.event.inputs.cluster_name }}
  IMAGE_TAG: ${{ github.event.inputs.image_tag }}
  DOMAIN_NAME: 'talk2me-gen-z.com'
  API_DOMAIN_NAME: 'api.talk2me-gen-z.com'

permissions:
  id-token: write
  contents: read

jobs:
  deploy-application:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $AWS_REGION
      
      - name: Get AWS Account ID
        id: get-aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
      
      - name: Find existing load balancer
        id: find-lb
        run: |
          echo "Looking for existing load balancers related to EKS cluster $CLUSTER_NAME..."
          
          # Get the VPC ID from the EKS cluster
          VPC_ID=$(aws eks describe-cluster --name $CLUSTER_NAME --region $AWS_REGION --query "cluster.resourcesVpcConfig.vpcId" --output text)
          echo "Cluster VPC ID: $VPC_ID"
          
          # Find load balancers in this VPC
          LBS=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?VpcId=='$VPC_ID']" --output json)
          LB_COUNT=$(echo "$LBS" | jq length)
          echo "Found $LB_COUNT load balancers in the EKS cluster VPC"
          
          if [ "$LB_COUNT" -gt 0 ]; then
            # List the load balancers
            echo "Available load balancers:"
            echo "$LBS" | jq -r '.[] | "- Name: " + .LoadBalancerName + ", DNSName: " + .DNSName + ", Type: " + .Type'
            
            # Find ALBs (application load balancers)
            ALBS=$(echo "$LBS" | jq -r '[.[] | select(.Type=="application")]')
            ALB_COUNT=$(echo "$ALBS" | jq length)
            
            if [ "$ALB_COUNT" -gt 0 ]; then
              # Get the first ALB in the list - we'll use this one
              FIRST_ALB=$(echo "$ALBS" | jq -r '.[0]')
              ALB_NAME=$(echo "$FIRST_ALB" | jq -r '.LoadBalancerName')
              ALB_DNS=$(echo "$FIRST_ALB" | jq -r '.DNSName')
              ALB_ARN=$(echo "$FIRST_ALB" | jq -r '.LoadBalancerArn')
              ALB_ZONE_ID=$(echo "$FIRST_ALB" | jq -r '.CanonicalHostedZoneId')
              
              echo "Using existing ALB: $ALB_NAME ($ALB_DNS)"
              echo "ALB_NAME=$ALB_NAME" >> $GITHUB_ENV
              echo "ALB_DNS=$ALB_DNS" >> $GITHUB_ENV
              echo "ALB_ARN=$ALB_ARN" >> $GITHUB_ENV
              echo "ALB_ZONE_ID=$ALB_ZONE_ID" >> $GITHUB_ENV
              echo "found=true" >> $GITHUB_OUTPUT
            else
              echo "No application load balancers found in the VPC"
              echo "found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "No load balancers found in the VPC"
            echo "found=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Deploy Backend
        run: |
          echo "Deploying backend service..."
          
          # Process template with environment variables
          if [ -f "k8s/backend-deployment.yaml" ]; then
            envsubst < k8s/backend-deployment.yaml > backend-deployment.yaml
            kubectl apply -f backend-deployment.yaml -n talk2me
          else
            echo "Warning: k8s/backend-deployment.yaml not found"
          fi
          
          if [ -f "k8s/backend-service.yaml" ]; then
            kubectl apply -f k8s/backend-service.yaml -n talk2me
          else
            # Create a default service if file doesn't exist
            cat << EOF | kubectl apply -f -
            apiVersion: v1
            kind: Service
            metadata:
              name: talk2me-backend
              namespace: talk2me
            spec:
              selector:
                app: talk2me-backend
              ports:
              - port: 80
                targetPort: 8000
              type: ClusterIP
            EOF
          fi
      
      - name: Deploy Frontend
        run: |
          echo "Deploying frontend service..."
          
          # Process template with environment variables
          if [ -f "k8s/frontend-deployment.yaml" ]; then
            envsubst < k8s/frontend-deployment.yaml > frontend-deployment.yaml
            kubectl apply -f frontend-deployment.yaml -n talk2me
          else
            echo "Warning: k8s/frontend-deployment.yaml not found"
          fi
          
          if [ -f "k8s/frontend-service.yaml" ]; then
            kubectl apply -f k8s/frontend-service.yaml -n talk2me
          else
            # Create a default service if file doesn't exist
            cat << EOF | kubectl apply -f -
            apiVersion: v1
            kind: Service
            metadata:
              name: talk2me-frontend
              namespace: talk2me
            spec:
              selector:
                app: talk2me-frontend
              ports:
              - port: 80
                targetPort: 80
              type: ClusterIP
            EOF
          fi
      
      - name: Get ACM certificate ARN
        id: get-certificate
        run: |
          echo "Finding ACM certificate for $DOMAIN_NAME..."
          
          # Try to find certificate for domain in ACM
          CERT_ARN=$(aws acm list-certificates --query "CertificateSummaryList[?contains(DomainName, '*.$DOMAIN_NAME') || DomainName=='$DOMAIN_NAME'].CertificateArn" --output text | head -1)
          
          if [ -n "$CERT_ARN" ]; then
            echo "Found certificate: $CERT_ARN"
            echo "CERTIFICATE_ARN=$CERT_ARN" >> $GITHUB_ENV
            echo "certificate_found=true" >> $GITHUB_OUTPUT
          else
            echo "No certificate found for $DOMAIN_NAME"
            echo "certificate_found=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Create or update services and ingress
        run: |
          # First remove any existing ingress to avoid conflicts
          echo "Removing any existing ingress..."
          kubectl delete ingress talk2me-ingress -n talk2me --ignore-not-found
          
          # Create new ingress based on whether we found an existing ALB
          if [ "${{ steps.find-lb.outputs.found }}" == "true" ]; then
            echo "Creating ingress with reference to existing ALB: $ALB_NAME"
            
            # Create a new ingress file that references the existing ALB
            cat << EOF > ingress.yaml
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              name: talk2me-ingress
              namespace: talk2me
              annotations:
                kubernetes.io/ingress.class: "alb"
                alb.ingress.kubernetes.io/scheme: internet-facing
                alb.ingress.kubernetes.io/target-type: ip
                alb.ingress.kubernetes.io/load-balancer-name: "$ALB_NAME"
                alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=60
                alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
                alb.ingress.kubernetes.io/ssl-redirect: '443'
                alb.ingress.kubernetes.io/ssl-policy: "ELBSecurityPolicy-TLS-1-2-2017-01"
                external-dns.alpha.kubernetes.io/hostname: "$DOMAIN_NAME,$API_DOMAIN_NAME"
                alb.ingress.kubernetes.io/tags: Environment=prod,Team=talk2me
            EOF
            
            # Add certificate ARN if found
            if [ "${{ steps.get-certificate.outputs.certificate_found }}" == "true" ]; then
              echo "    alb.ingress.kubernetes.io/certificate-arn: \"$CERTIFICATE_ARN\"" >> ingress.yaml
            fi
          else
            echo "No existing ALB found. Creating new ingress without specifying ALB name."
            
            # Create a new ingress file without specifying ALB name
            cat << EOF > ingress.yaml
            apiVersion: networking.k8s.io/v1
            kind: Ingress
            metadata:
              name: talk2me-ingress
              namespace: talk2me
              annotations:
                kubernetes.io/ingress.class: "alb"
                alb.ingress.kubernetes.io/scheme: internet-facing
                alb.ingress.kubernetes.io/target-type: ip
                alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
                alb.ingress.kubernetes.io/ssl-redirect: '443'
                alb.ingress.kubernetes.io/ssl-policy: "ELBSecurityPolicy-TLS-1-2-2017-01"
                external-dns.alpha.kubernetes.io/hostname: "$DOMAIN_NAME,$API_DOMAIN_NAME"
                alb.ingress.kubernetes.io/tags: Environment=prod,Team=talk2me
            EOF
            
            # Add certificate ARN if found
            if [ "${{ steps.get-certificate.outputs.certificate_found }}" == "true" ]; then
              echo "    alb.ingress.kubernetes.io/certificate-arn: \"$CERTIFICATE_ARN\"" >> ingress.yaml
            fi
          fi
          
          # Add the rules to the ingress
          cat << EOF >> ingress.yaml
          spec:
            rules:
            - host: $DOMAIN_NAME
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: talk2me-frontend
                      port:
                        number: 80
            - host: $API_DOMAIN_NAME
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: talk2me-backend
                      port:
                        number: 80
          EOF
          
          # Display the final ingress file
          echo "Final ingress configuration:"
          cat ingress.yaml
          
          # Apply the ingress
          kubectl apply -f ingress.yaml
      
      - name: Wait for deployments to be ready
        run: |
          echo "Waiting for backend deployment to be ready..."
          kubectl rollout status deployment/talk2me-backend -n talk2me --timeout=300s
          
          echo "Waiting for frontend deployment to be ready..."
          kubectl rollout status deployment/talk2me-frontend -n talk2me --timeout=300s
      
      - name: Wait for ingress to connect to load balancer
        run: |
          echo "Waiting for ingress to be connected to the load balancer (this may take a few minutes)..."
          
          # If we found an existing ALB, we can use its DNS immediately
          if [ "${{ steps.find-lb.outputs.found }}" == "true" ]; then
            echo "Using existing ALB DNS: $ALB_DNS"
            LB_ADDRESS="$ALB_DNS"
            echo "LB_ADDRESS=$LB_ADDRESS" >> $GITHUB_ENV
          else
            # Otherwise, wait for the ingress to get an address
            ATTEMPTS=0
            MAX_ATTEMPTS=30
            SLEEP_SECONDS=20
            
            while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
              LB_ADDRESS=$(kubectl get ingress talk2me-ingress -n talk2me -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
              
              if [ -n "$LB_ADDRESS" ]; then
                echo "Ingress load balancer is available at: $LB_ADDRESS"
                echo "LB_ADDRESS=$LB_ADDRESS" >> $GITHUB_ENV
                break
              fi
              
              echo "Waiting for load balancer address... Attempt $(($ATTEMPTS+1))/$MAX_ATTEMPTS"
              
              # Every few attempts, check the ingress status
              if [ $(($ATTEMPTS % 5)) -eq 0 ]; then
                echo "Checking ingress status:"
                kubectl describe ingress talk2me-ingress -n talk2me
                echo "Checking AWS Load Balancer Controller logs:"
                kubectl logs -n kube-system deployment/aws-load-balancer-controller --tail=20 || echo "Failed to get logs"
              fi
              
              ATTEMPTS=$((ATTEMPTS+1))
              sleep $SLEEP_SECONDS
            done
            
            if [ -z "$LB_ADDRESS" ]; then
              echo "Warning: Load balancer address not available after several attempts"
              kubectl get ingress talk2me-ingress -n talk2me -o yaml
              
              if [ "${{ steps.find-lb.outputs.found }}" == "true" ]; then
                # Fall back to the ALB DNS we found earlier
                echo "Using fallback to the existing ALB DNS: $ALB_DNS"
                LB_ADDRESS="$ALB_DNS"
                echo "LB_ADDRESS=$LB_ADDRESS" >> $GITHUB_ENV
              else
                echo "Could not determine the load balancer address."
                echo "AWS Load Balancer Controller logs:"
                kubectl logs -n kube-system deployment/aws-load-balancer-controller --tail=50 || echo "Failed to get logs"
              fi
            fi
          fi
      
      - name: Update Route53 DNS if needed
        if: env.LB_ADDRESS != ''
        run: |
          echo "Looking for Route53 hosted zone for $DOMAIN_NAME..."
          HOSTED_ZONE_ID=$(aws route53 list-hosted-zones-by-name --dns-name $DOMAIN_NAME --max-items 1 --query 'HostedZones[0].Id' --output text | cut -d'/' -f 3)
          
          if [ -z "$HOSTED_ZONE_ID" ] || [ "$HOSTED_ZONE_ID" == "null" ]; then
            echo "No hosted zone found for $DOMAIN_NAME"
            echo "Creating new hosted zone..."
            
            ZONE_RESULT=$(aws route53 create-hosted-zone \
              --name $DOMAIN_NAME \
              --caller-reference "talk2me-$(date +%s)" \
              --hosted-zone-config Comment="Hosted zone for Talk2Me application")
            
            # Extract zone ID from response
            HOSTED_ZONE_ID=$(echo $ZONE_RESULT | jq -r '.HostedZone.Id' | cut -d/ -f3)
            echo "Created new hosted zone with ID: $HOSTED_ZONE_ID"
            
            # Output nameservers for domain configuration
            echo "Please configure your domain registrar with the following nameservers:"
            echo $ZONE_RESULT | jq -r '.DelegationSet.NameServers[]' | sed 's/^/  - /'
          else
            echo "Found hosted zone with ID: $HOSTED_ZONE_ID"
          fi
          
          if [ -n "$HOSTED_ZONE_ID" ]; then
            echo "Updating Route53 DNS records to point to: $LB_ADDRESS"
            
            # Get the ALB hosted zone ID
            if [ -n "$ALB_ZONE_ID" ]; then
              CANONICAL_HOSTED_ZONE_ID="$ALB_ZONE_ID"
            else
              # Use the default for us-east-1 if we couldn't get it from the ALB
              CANONICAL_HOSTED_ZONE_ID="Z35SXDOTRQ7X7K"
            fi
            
            # Create JSON for DNS change batch
            cat > dns-changes.json << EOF
            {
              "Changes": [
                {
                  "Action": "UPSERT",
                  "ResourceRecordSet": {
                    "Name": "$DOMAIN_NAME",
                    "Type": "A",
                    "AliasTarget": {
                      "HostedZoneId": "$CANONICAL_HOSTED_ZONE_ID",
                      "DNSName": "$LB_ADDRESS",
                      "EvaluateTargetHealth": true
                    }
                  }
                },
                {
                  "Action": "UPSERT",
                  "ResourceRecordSet": {
                    "Name": "$API_DOMAIN_NAME",
                    "Type": "A",
                    "AliasTarget": {
                      "HostedZoneId": "$CANONICAL_HOSTED_ZONE_ID",
                      "DNSName": "$LB_ADDRESS",
                      "EvaluateTargetHealth": true
                    }
                  }
                }
              ]
            }
            EOF
            
            # Apply the DNS changes
            CHANGE_ID=$(aws route53 change-resource-record-sets \
              --hosted-zone-id $HOSTED_ZONE_ID \
              --change-batch file://dns-changes.json \
              --query 'ChangeInfo.Id' --output text)
            
            echo "DNS records have been updated for $DOMAIN_NAME and $API_DOMAIN_NAME"
            echo "DNS change ID: $CHANGE_ID"
            echo "DNS changes take time to propagate. Please allow 5-10 minutes."
          else
            echo "Failed to get or create hosted zone. DNS records not updated