name: 2. Build and Push Docker Images

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      image_tag:
        description: 'Docker Image Tag'
        required: true
        default: 'latest'

env:
  AWS_REGION: ${{ github.event.inputs.region }}
  IMAGE_TAG: ${{ github.event.inputs.image_tag }}
  BACKEND_ECR_REPOSITORY: talk2me-backend
  FRONTEND_ECR_REPOSITORY: talk2me-frontend

permissions:
  id-token: write
  contents: read

jobs:
  setup-aws:
    runs-on: ubuntu-latest
    outputs:
      aws_account_id: ${{ steps.get-aws-account.outputs.account_id }}
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - id: get-aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "account_id=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT

  create-ecr:
    needs: setup-aws
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - run: |
          aws ecr describe-repositories --repository-names $BACKEND_ECR_REPOSITORY 2>/dev/null || \
          aws ecr create-repository --repository-name $BACKEND_ECR_REPOSITORY --image-scanning-configuration scanOnPush=true

          aws ecr describe-repositories --repository-names $FRONTEND_ECR_REPOSITORY 2>/dev/null || \
          aws ecr create-repository --repository-name $FRONTEND_ECR_REPOSITORY --image-scanning-configuration scanOnPush=true

          aws ecr put-lifecycle-policy --repository-name $BACKEND_ECR_REPOSITORY \
            --lifecycle-policy-text '{"rules":[{"rulePriority":1,"description":"Keep only last 10 images","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":10},"action":{"type":"expire"}}]}'

          aws ecr put-lifecycle-policy --repository-name $FRONTEND_ECR_REPOSITORY \
            --lifecycle-policy-text '{"rules":[{"rulePriority":1,"description":"Keep only last 10 images","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":10},"action":{"type":"expire"}}]}'

  login-ecr:
    needs: create-ecr
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.login.outputs.registry }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v1

  build-backend:
    needs: login-ecr
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.push.outputs.image }}
    steps:
      - uses: actions/checkout@v3

      - name: Debug ECR Registry
        run: echo "ECR_REGISTRY=${{ needs.login-ecr.outputs.registry }}"

      - name: Build and Push Backend
        id: push
        env:
          ECR_REGISTRY: ${{ needs.login-ecr.outputs.registry }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$BACKEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  build-frontend:
    needs: login-ecr
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.push.outputs.image }}
    steps:
      - uses: actions/checkout@v3

      - name: Debug ECR Registry
        run: echo "ECR_REGISTRY=${{ needs.login-ecr.outputs.registry }}"

      - name: Build and Push Frontend
        id: push
        env:
          ECR_REGISTRY: ${{ needs.login-ecr.outputs.registry }}
        run: |
          cd frontend
          docker build -t $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$FRONTEND_ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  save-artifacts:
    needs: [build-backend, build-frontend, setup-aws]
    runs-on: ubuntu-latest
    steps:
      - run: |
          mkdir -p ./artifacts
          echo "BACKEND_IMAGE=${{ needs.build-backend.outputs.image }}" > ./artifacts/image-info.env
          echo "FRONTEND_IMAGE=${{ needs.build-frontend.outputs.image }}" >> ./artifacts/image-info.env
          echo "AWS_ACCOUNT_ID=${{ needs.setup-aws.outputs.aws_account_id }}" >> ./artifacts/image-info.env
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" >> ./artifacts/image-info.env

      - uses: actions/upload-artifact@v3
        with:
          name: image-info
          path: ./artifacts/image-info.env
          retention-days: 1
