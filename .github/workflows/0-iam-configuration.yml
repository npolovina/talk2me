name: 0. IAM Configuration

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      user_name:
        description: 'AWS IAM User Name'
        required: true
        default: 'GitHub-Actions-User'

env:
  AWS_REGION: ${{ github.event.inputs.region }}
  IAM_USER_NAME: ${{ github.event.inputs.user_name }}

permissions:
  id-token: write
  contents: read

jobs:
  setup-iam:
    name: Setup IAM User Permissions
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Get AWS Account ID
        id: get-aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV

      - name: Create IAM Policy for Talk2Me Deployment
        run: |
          POLICY_NAME="Talk2Me-Deployment-Policy"
          POLICY_EXISTS=$(aws iam get-policy --policy-arn arn:aws:iam::$AWS_ACCOUNT_ID:policy/$POLICY_NAME 2>&1 | grep "NoSuchEntity" || echo "exists")
          
          if [ "$POLICY_EXISTS" != "exists" ]; then
            echo "Creating IAM policy for Talk2Me deployment..."
            
            # Write the policy document to a file
            echo '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "eks:*",
                    "ec2:*",
                    "ecr:*",
                    "iam:GetRole",
                    "iam:CreateRole",
                    "iam:DeleteRole",
                    "iam:AttachRolePolicy",
                    "iam:DetachRolePolicy",
                    "iam:PutRolePolicy",
                    "iam:GetRolePolicy",
                    "iam:DeleteRolePolicy",
                    "iam:CreatePolicy",
                    "iam:ListPolicies",
                    "iam:GetPolicy",
                    "iam:ListAttachedRolePolicies",
                    "iam:PassRole",
                    "iam:CreateServiceLinkedRole",
                    "iam:TagRole",
                    "route53:*",
                    "autoscaling:*",
                    "elasticloadbalancing:*",
                    "cloudformation:*",
                    "acm:*"
                  ],
                  "Resource": "*"
                }
              ]
            }' > policy.json
            
            # Create the policy
            POLICY_ARN=$(aws iam create-policy \
              --policy-name $POLICY_NAME \
              --policy-document file://policy.json \
              --query 'Policy.Arn' --output text)
            
            echo "Created policy with ARN: $POLICY_ARN"
          else
            POLICY_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:policy/$POLICY_NAME"
            echo "IAM policy for Talk2Me deployment already exists"
          fi
          
          echo "POLICY_ARN=$POLICY_ARN" >> $GITHUB_ENV
      
      - name: Create AWS Load Balancer Controller Policy
        run: |
          POLICY_NAME="AWSLoadBalancerControllerIAMPolicy"
          POLICY_EXISTS=$(aws iam get-policy --policy-arn arn:aws:iam::$AWS_ACCOUNT_ID:policy/$POLICY_NAME 2>&1 | grep "NoSuchEntity" || echo "exists")
          
          if [ "$POLICY_EXISTS" != "exists" ]; then
            echo "Creating IAM policy for AWS Load Balancer Controller..."
            
            # Download the policy document
            curl -o alb_policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.2/docs/install/iam_policy.json
            
            # Create the policy
            ALB_POLICY_ARN=$(aws iam create-policy \
              --policy-name $POLICY_NAME \
              --policy-document file://alb_policy.json \
              --query 'Policy.Arn' --output text)
            
            echo "Created ALB policy with ARN: $ALB_POLICY_ARN"
          else
            ALB_POLICY_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:policy/$POLICY_NAME"
            echo "IAM policy for AWS Load Balancer Controller already exists"
          fi
          
          echo "ALB_POLICY_ARN=$ALB_POLICY_ARN" >> $GITHUB_ENV
      
      - name: Create External DNS Policy
        run: |
          POLICY_NAME="ExternalDNSPolicy"
          POLICY_EXISTS=$(aws iam get-policy --policy-arn arn:aws:iam::$AWS_ACCOUNT_ID:policy/$POLICY_NAME 2>&1 | grep "NoSuchEntity" || echo "exists")
          
          if [ "$POLICY_EXISTS" != "exists" ]; then
            echo "Creating IAM policy for External DNS..."
            
            # Create policy document
            echo '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "route53:ChangeResourceRecordSets"
                  ],
                  "Resource": [
                    "arn:aws:route53:::hostedzone/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "route53:ListHostedZones",
                    "route53:ListResourceRecordSets"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }' > external_dns_policy.json
            
            # Create the policy
            DNS_POLICY_ARN=$(aws iam create-policy \
              --policy-name $POLICY_NAME \
              --policy-document file://external_dns_policy.json \
              --query 'Policy.Arn' --output text)
            
            echo "Created External DNS policy with ARN: $DNS_POLICY_ARN"
          else
            DNS_POLICY_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:policy/$POLICY_NAME"
            echo "IAM policy for External DNS already exists"
          fi
          
          echo "DNS_POLICY_ARN=$DNS_POLICY_ARN" >> $GITHUB_ENV
      
      - name: Create Cluster Autoscaler Policy
        run: |
          POLICY_NAME="ClusterAutoscalerPolicy"
          POLICY_EXISTS=$(aws iam get-policy --policy-arn arn:aws:iam::$AWS_ACCOUNT_ID:policy/$POLICY_NAME 2>&1 | grep "NoSuchEntity" || echo "exists")
          
          if [ "$POLICY_EXISTS" != "exists" ]; then
            echo "Creating IAM policy for Cluster Autoscaler..."
            
            # Create policy document
            echo '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeAutoScalingInstances",
                    "autoscaling:DescribeLaunchConfigurations",
                    "autoscaling:DescribeTags",
                    "autoscaling:SetDesiredCapacity",
                    "autoscaling:TerminateInstanceInAutoScalingGroup",
                    "ec2:DescribeLaunchTemplateVersions"
                  ],
                  "Resource": ["*"]
                }
              ]
            }' > cluster_autoscaler_policy.json
            
            # Create the policy
            AUTOSCALER_POLICY_ARN=$(aws iam create-policy \
              --policy-name $POLICY_NAME \
              --policy-document file://cluster_autoscaler_policy.json \
              --query 'Policy.Arn' --output text)
            
            echo "Created Cluster Autoscaler policy with ARN: $AUTOSCALER_POLICY_ARN"
          else
            AUTOSCALER_POLICY_ARN="arn:aws:iam::$AWS_ACCOUNT_ID:policy/$POLICY_NAME"
            echo "IAM policy for Cluster Autoscaler already exists"
          fi
          
          echo "AUTOSCALER_POLICY_ARN=$AUTOSCALER_POLICY_ARN" >> $GITHUB_ENV
      
      - name: Check if IAM user exists
        id: check-user
        run: |
          USER_EXISTS=$(aws iam get-user --user-name $IAM_USER_NAME 2>&1 | grep "NoSuchEntity" || echo "exists")
          
          if [ "$USER_EXISTS" = "exists" ]; then
            echo "IAM user $IAM_USER_NAME already exists"
            echo "USER_EXISTS=true" >> $GITHUB_ENV
          else
            echo "IAM user $IAM_USER_NAME does not exist"
            echo "USER_EXISTS=false" >> $GITHUB_ENV
          fi
      
      - name: Attach policies to IAM user
        if: env.USER_EXISTS == 'true'
        run: |
          echo "Attaching policies to IAM user $IAM_USER_NAME..."
          
          # Attach Talk2Me Deployment Policy
          aws iam attach-user-policy \
            --user-name $IAM_USER_NAME \
            --policy-arn $POLICY_ARN || echo "Failed to attach Talk2Me Deployment Policy"
          
          # Attach AWS Load Balancer Controller Policy
          aws iam attach-user-policy \
            --user-name $IAM_USER_NAME \
            --policy-arn $ALB_POLICY_ARN || echo "Failed to attach AWS Load Balancer Controller Policy"
          
          # Attach External DNS Policy
          aws iam attach-user-policy \
            --user-name $IAM_USER_NAME \
            --policy-arn $DNS_POLICY_ARN || echo "Failed to attach External DNS Policy"
          
          # Attach Cluster Autoscaler Policy
          aws iam attach-user-policy \
            --user-name $IAM_USER_NAME \
            --policy-arn $AUTOSCALER_POLICY_ARN || echo "Failed to attach Cluster Autoscaler Policy"
          
          echo "All policies attached to user $IAM_USER_NAME"
      
      - name: Output Configuration
        run: |
          echo "==========================================================="
          echo "AWS IAM Configuration Complete"
          echo "==========================================================="
          echo "Region: $AWS_REGION"
          echo "Account ID: $AWS_ACCOUNT_ID"
          echo "User: $IAM_USER_NAME"
          echo ""
          echo "Policies created and attached:"
          echo "- Talk2Me-Deployment-Policy"
          echo "- AWSLoadBalancerControllerIAMPolicy"
          echo "- ExternalDNSPolicy"
          echo "- ClusterAutoscalerPolicy"
          echo ""
          echo "The following GitHub secrets should be set:"
          echo "- AWS_ACCESS_KEY_ID: Your IAM user access key"
          echo "- AWS_SECRET_ACCESS_KEY: Your IAM user secret key"
          echo "============================================================"
          echo ""
          echo "IMPORTANT: You will also need to add your DEEPSEEK_API_KEY as a GitHub Secret."