name: 0. IAM Configuration

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      user_name:
        description: 'AWS IAM User Name'
        required: true
        default: 'GitHub-Actions-User'

env:
  AWS_REGION: ${{ github.event.inputs.region }}
  IAM_USER_NAME: ${{ github.event.inputs.user_name }}

permissions:
  id-token: write
  contents: read

jobs:
  prerequisites:
    name: Get AWS Account Information
    runs-on: ubuntu-latest
    outputs:
      aws_account_id: ${{ steps.get-aws-account.outputs.aws_account_id }}
      user_exists: ${{ steps.check-user.outputs.user_exists }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        id: get-aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "aws_account_id=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT

      - name: Check if IAM user exists
        id: check-user
        run: |
          USER_EXISTS=$(aws iam get-user --user-name $IAM_USER_NAME 2>&1 | grep "NoSuchEntity" || echo "exists")
          if [ "$USER_EXISTS" = "exists" ]; then
            echo "user_exists=true" >> $GITHUB_OUTPUT
          else
            echo "user_exists=false" >> $GITHUB_OUTPUT

  create-policy-template:
    name: Create or Update IAM Policy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        policy:
          - name: Talk2Me-Deployment-Policy
            file: policy.json
            content: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "eks:*", "ec2:*", "ecr:*", "iam:GetRole", "iam:CreateRole",
                      "iam:DeleteRole", "iam:AttachRolePolicy", "iam:DetachRolePolicy",
                      "iam:PutRolePolicy", "iam:GetRolePolicy", "iam:DeleteRolePolicy",
                      "iam:CreatePolicy", "iam:ListPolicies", "iam:GetPolicy",
                      "iam:ListAttachedRolePolicies", "iam:PassRole", "iam:CreateServiceLinkedRole",
                      "iam:TagRole", "route53:*", "autoscaling:*", "elasticloadbalancing:*",
                      "cloudformation:*", "acm:*"
                    ],
                    "Resource": "*"
                  }
                ]
              }
          - name: AWSLoadBalancerControllerIAMPolicy
            file: alb_policy.json
            url: https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.2/docs/install/iam_policy.json
          - name: ExternalDNSPolicy
            file: external_dns_policy.json
            content: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": ["route53:ChangeResourceRecordSets"],
                    "Resource": ["arn:aws:route53:::hostedzone/*"]
                  },
                  {
                    "Effect": "Allow",
                    "Action": ["route53:ListHostedZones", "route53:ListResourceRecordSets"],
                    "Resource": ["*"]
                  }
                ]
              }
          - name: ClusterAutoscalerPolicy
            file: cluster_autoscaler_policy.json
            content: |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Action": [
                      "autoscaling:DescribeAutoScalingGroups",
                      "autoscaling:DescribeAutoScalingInstances",
                      "autoscaling:DescribeLaunchConfigurations",
                      "autoscaling:DescribeTags",
                      "autoscaling:SetDesiredCapacity",
                      "autoscaling:TerminateInstanceInAutoScalingGroup",
                      "ec2:DescribeLaunchTemplateVersions"
                    ],
                    "Resource": ["*"]
                  }
                ]
              }
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Prepare policy document
        run: |
          if [ -n "${{ matrix.policy.url }}" ]; then
            curl -o ${{ matrix.policy.file }} ${{ matrix.policy.url }}
          else
            echo '${{ matrix.policy.content }}' > ${{ matrix.policy.file }}

      - name: Create or Update IAM Policy
        run: |
          POLICY_NAME=${{ matrix.policy.name }}
          POLICY_FILE=${{ matrix.policy.file }}
          POLICY_ARN="arn:aws:iam::${{ needs.prerequisites.outputs.aws_account_id }}:policy/$POLICY_NAME"

          if aws iam get-policy --policy-arn $POLICY_ARN > /dev/null 2>&1; then
            VERSION_COUNT=$(aws iam list-policy-versions --policy-arn $POLICY_ARN --query 'Versions | length(@)')
            if [ "$VERSION_COUNT" -ge 5 ]; then
              OLDEST_VERSION=$(aws iam list-policy-versions --policy-arn $POLICY_ARN \
                --query 'Versions[?IsDefaultVersion==`false`]|[0].VersionId' --output text)
              aws iam delete-policy-version --policy-arn $POLICY_ARN --version-id $OLDEST_VERSION
            fi
            aws iam create-policy-version --policy-arn $POLICY_ARN \
              --policy-document file://$POLICY_FILE --set-as-default
          else
            aws iam create-policy --policy-name $POLICY_NAME \
              --policy-document file://$POLICY_FILE
          fi
