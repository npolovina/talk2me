name: 0. IAM Configuration and Setup

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
      role_name:
        description: 'IAM Role Name'
        required: true
        default: 'GitHub-Actions-Talk2Me-Role'
      cluster_name:
        description: 'EKS Cluster Name'
        required: true
        default: 'talk2me-cluster'
      domain_name:
        description: 'Domain Name'
        required: true
        default: 'talk2me-gen-z.com'

env:
  AWS_REGION: ${{ github.event.inputs.region }}
  ROLE_NAME: ${{ github.event.inputs.role_name }}
  CLUSTER_NAME: ${{ github.event.inputs.cluster_name }}
  DOMAIN_NAME: ${{ github.event.inputs.domain_name }}

permissions:
  id-token: write
  contents: read

jobs:
  setup-iam-and-infrastructure:
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Get AWS Account ID
      id: get-aws-account
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV

    - name: Create IAM OIDC Provider
      run: |
        OIDC_PROVIDER_EXISTS=$(aws iam list-open-id-connect-providers | grep $GITHUB_OIDC_PROVIDER_URL || echo "")
        
        if [ -z "$OIDC_PROVIDER_EXISTS" ]; then
            echo "Creating OIDC Provider for GitHub Actions..."
            
            aws iam create-open-id-connect-provider \
            --url https://$GITHUB_OIDC_PROVIDER_URL \
            --client-id-list $GITHUB_OIDC_AUDIENCE \
            --thumbprint-list "6938fd4d98bab03faadb97b34396831e3780aea1"
        else
            echo "OIDC Provider for GitHub Actions already exists"
        fi
    
    - name: Create GitHub Actions IAM Role
      run: |
        ROLE_NAME="github-actions-talk2me-role"
        
        # Create trust policy
        cat > trust-policy.json << EOF
        {
            "Version": "2012-10-17",
            "Statement": [
            {
                "Effect": "Allow",
                "Principal": {
                "Federated": "arn:aws:iam::$AWS_ACCOUNT_ID:oidc-provider/$GITHUB_OIDC_PROVIDER_URL"
                },
                "Action": "sts:AssumeRoleWithWebIdentity",
                "Condition": {
                "StringEquals": {
                    "$GITHUB_OIDC_PROVIDER_URL:aud": "$GITHUB_OIDC_AUDIENCE"
                },
                "StringLike": {
                    "$GITHUB_OIDC_PROVIDER_URL:sub": "repo:${{ github.repository }}:*"
                }
                }
            }
            ]
        }
        EOF
        
        # Create or update role
        aws iam create-role --role-name $ROLE_NAME \
            --assume-role-policy-document file://trust-policy.json \
            || aws iam update-assume-role-policy --role-name $ROLE_NAME \
            --policy-document file://trust-policy.json

    - name: Create IAM Policy for Deployment
      run: |
        POLICY_NAME="talk2me-deployment-policy"
        
        cat > deployment-policy.json << EOF
        {
            "Version": "2012-10-17",
            "Statement": [
            {
                "Effect": "Allow",
                "Action": [
                "eks:*",
                "ec2:*",
                "ecr:*",
                "iam:*",
                "route53:*",
                "elasticloadbalancing:*",
                "acm:*",
                "cloudformation:*"
                ],
                "Resource": "*"
            }
            ]
        }
        EOF
        
        # Create or update policy
        POLICY_ARN=$(aws iam create-policy \
            --policy-name $POLICY_NAME \
            --policy-document file://deployment-policy.json \
            --query 'Policy.Arn' \
            --output text 2>/dev/null || aws iam get-policy --policy-arn arn:aws:iam::$AWS_ACCOUNT_ID:policy/$POLICY_NAME --query 'Policy.Arn' --output text)
        
        # Attach policy to role
        aws iam attach-role-policy \
            --role-name github-actions-talk2me-role \
            --policy-arn $POLICY_ARN

    - name: Output Configuration
      run: |
        echo "AWS IAM Configuration Complete"
        echo "Role ARN: arn:aws:iam::$AWS_ACCOUNT_ID:role/github-actions-talk2me-role"
        echo "Add this Role ARN to your GitHub Secrets as AWS_ROLE_ARN"